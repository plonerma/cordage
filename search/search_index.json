{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>In your desired environment run:</p> <pre><code>pip install cordage\n</code></pre>"},{"location":"#usage-example","title":"Usage Example","text":"<p>The following code illustrates how to set up a cordage CLI.</p> example.py<pre><code>from dataclasses import dataclass\nimport cordage\n\n\n@dataclass\nclass Config:\n    lr: float = 5e-5\n    name: str = \"MNIST\"\n\n\ndef train(config: Config):\n    \"\"\"Help text which will be shown.\"\"\"\n    print(config)\n\n\nif __name__ == \"__main__\":\n    cordage.run(train)\n</code></pre> <p>Using <code>--help</code> option now shows the available configuration options.</p> <pre><code>$ python example.py --help\n\nusage: example.py [-h] [config_file] &lt;configuration options to overwrite&gt;\n\nHelp text which will be shown.\n\npositional arguments:\n  config_file           Top-level config file to load (optional).\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --series-skip N       Skip first N trials in the execution of a series.\n  --cordage-comment COMMENT\n                        Add a comment to the annotation of this series.\n  --output-dir PATH     Path to use as the output directory.\n\nconfiguration:\n  --lr LR\n  --name NAME\n</code></pre>"},{"location":"features/","title":"Features","text":"<p>Cordage can be used to manage experimental configurations and can aide in managing experimental outputs.</p>"},{"location":"features/#experimental-configuration","title":"Experimental Configuration","text":"<p>Cordage helps in providing a configuration to a main function. This set of features is the default and (at the moment) cannot be disabled.</p>"},{"location":"features/#cli-and-config-reader","title":"CLI and Config Reader","text":"<p>When calling <code>cordage.run</code> with a function, a command line interface is build. This enables you to set the configurations specified in a config <code>dataclass</code> to be set via the command line or pass a configuration files which is automatically read into an respective config object.</p>"},{"location":"features/#series-of-experiments-multiruns","title":"Series of Experiments / Multiruns","text":"<p>By specifying the <code>__series__</code> key in a passed config file, the experiment can be repeated multiple time with varying configuration. <code>__series__</code> can either contain a list of changes to apply to the base configuration or a (nested dictionary) with mutliple lists (in this case each combination of values is executed once).</p>"},{"location":"features/#examples","title":"Examples","text":"<p>The following will execute 3 repetitions:</p> <pre><code>{\n    \"__series__\": [\n        {\"a\": 1},\n        {\"a\": 2},\n        {\"a\": 3}\n    ]\n}\n</code></pre> <p>This second example will execute the experiment 4 times:</p> <pre><code>{\n    \"__series__\": {\n        \"a\": [1, 2],\n        \"b\": [1, 2]\n    }\n}\n</code></pre>"},{"location":"features/#output-directory-optional","title":"Output directory (optional)","text":"<p>Cordage creates an output directory for each experiment based on the configured pattern and stores the  If configured (see below), the log-files are automatically saved here.</p>"},{"location":"features/#log-setup-optional","title":"Log Setup (optional)","text":""}]}